cmake_minimum_required(VERSION 3.10)

# Set the project name
project(ContactManager)   #change project name


# C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Enable .env support
#add_definitions(-DENABLE_DOTENV)

# Find system packages
#find_package(OpenSSL REQUIRED)
#find_package(Python3 REQUIRED COMPONENTS Interpreter)
#find_package(Threads REQUIRED)

find_package(Drogon REQUIRED)


# Include directories (add the path to your CxxTest installation)
include_directories(/opt/homebrew/opt/cxxtest/include)

# Set the path to the cxxtestgen script
set(CXXTEST_TESTGEN_EXECUTABLE /opt/homebrew/opt/cxxtest/bin/cxxtestgen)

# Find CxxTest package
#find_package(CxxTest REQUIRED)

# Enable testing
enable_testing()

# Create the test target using the generated runner.cpp
# CXXTEST_ADD_TEST(unittest                      # Name of the test target
#     runner.cpp    # Generated by cxxtestgen
#     ${CMAKE_CURRENT_SOURCE_DIR}/newCxxTest.h  # Test file
#     )


# Source files
file(GLOB_RECURSE SOURCES
    src/*.cpp
    controller/*.cpp
)

# Executable
add_executable(${PROJECT_NAME} ${SOURCES}
)

# Linker flags
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pthread")
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lpthread")
endif()



# Link libraries
target_link_libraries(${PROJECT_NAME}
    PRIVATE
    # Threads::Threads
    # OpenSSL::SSL
    # OpenSSL::Crypto
    # mysqlcppconn
    #CxxTest::CxxTest
    Drogon::Drogon
)

# Use C++20 features
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_20)

